# A simple implementation of Priority Queue
# using Queue.
class PriorityQueue(object):
	def __init__(self):
		self.queue = []

	def __str__(self):
		return ' '.join([str(i) for i in self.queue])

	# for checking if the queue is empty
	def isEmpty(self):
		return len(self.queue) == 0

	# for inserting an element in the queue
	def insert(self, data):
		self.queue.append(data)

	# for popping an element based on Priority
	def delete(self):
		try:
			max = 0
			for i in range(len(self.queue)):
				if self.queue[i] > self.queue[max]:
					max = i
			item = self.queue[max]
			del self.queue[max]
			return item
		except IndexError:
			print()
			exit()

if __name__ == '__main__':
	myQueue = PriorityQueue()
	myQueue.insert(12)
	myQueue.insert(1)
	myQueue.insert(14)
	myQueue.insert(7)
	print(myQueue)
	while not myQueue.isEmpty():
		print(myQueue.delete())
"""
Priority Queues are abstract data structures where each data/value in the queue has a certain priority.
For example, In airlines, baggage with the title “Business” or “First-class” arrives earlier than the rest.In hospitals
doctor give high priority to that patients who is in more critical condition as compared to other patient.
Priority Queue is an extension of the queue with the following properties.
1) An element with high priority is dequeued before an element with low priority.
2) If two elements have the same priority, they are served according to their order in the queue.
Various applications of Priority queue in Computer Science are:
Job Scheduling algorithms, CPU and Disk Scheduling, managing resources that are shared among different processes, etc.

Key differences between Priority Queue and Queue:
1)In Queue, the oldest element is dequeued first. While, in Priority Queue, element based on highest priority is dequeued.
2)When elements are popped out of a priority queue then result obtained in either sorted in Increasing order or in
Decreasing Order.
While, when elements are popped from a simple queue, a FIFO order of data is obtained in the result.
-------------------------------------------------------------------------------------------------------------------


In the priority queue each element in queue will be assigned a priosity integer.We can implement the priority queue
using three methods list,dictionary,heap etc.
-----------------------------------------------------------
Using List 
i.e in the list we will consider the element as its priority but that can 
be in two ways :
1)higher number will have higher priority and lower number will have lower priority i.e [1,2,3,4] in this list 4 has 
higher priority because 4 is the largest number in this list and 1 has smaller priority as compared to other elements in
the list. Note : ismy insertion krny ka bad hum list ko sort function sa sort kr dain ga takay top pr ziada priority wala element ho
isi tarha i.e  input krny ka bad hum list ko sort krain taky top pr ziada bara index hota ha tu bara hi element uspr ayy
i.e input is 9,5,8 then sort kia tu [5,8,9] is tarha 5 kam index pr yani kam priority aur 9 ki ziada kionky wo bary index pr ha
deletion ma hum dehan rakhty hain priority ka ka high priority wala dequeue ho
2)lower number will have higher priority and higher number will have lower priority i.e [1,2,3,4] in this list 4 has 
lower priority because 4 is the largest number in this list and 1 has higher priority as compared to other elements in
the list because it is the smallest element in the list.

-----------------------------------------------------------
 Using dictionaries
 hum ismy index ki jaga priority rakhain ga aur value ki jaga element
 i.e {1:4,9:4,3:10} yani 4 ki priority 1 ha aur 4 ki priority 9 ha aur 10 ki priority 3 ha
 ------------------------------------------------------------
A better implementation is to use Binary Heap which is typically used to implement priority queue.
Note that Python provides heapq in library also.
By using heap datastructure to implement Priority Queues, Time complexity:
Insert Operation: O(log(n))
Delete Operation: O(log(n))
"""
